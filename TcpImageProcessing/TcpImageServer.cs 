using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;

class TcpImageServer
{
    static void Main(string[] args)
    {
        TcpListener server = new TcpListener(IPAddress.Any, 5000);
        server.Start();
        Console.WriteLine("Server started on port 5000...");

        while (true)
        {
            TcpClient client = server.AcceptTcpClient();
            Console.WriteLine("Client connected.");
            Task.Run(() => HandleClient(client));
        }
    }

    static void HandleClient(TcpClient client)
    {
        NetworkStream stream = client.GetStream();
        using (MemoryStream ms = new MemoryStream())
        {
            byte[] buffer = new byte[4096];
            int bytesRead;

            // Receive image data from the client
            while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, bytesRead);
            }

            ms.Seek(0, SeekOrigin.Begin);

            // Convert memory stream to Image
            Image image = Image.FromStream(ms);

            // Process the image (convert to grayscale)
            Image processedImage = ConvertToGrayscale(image);

            // Save the processed image
            processedImage.Save("processed_image.jpg", ImageFormat.Jpeg);
            Console.WriteLine("Image received and processed.");

            client.Close();
        }
    }

    static Image ConvertToGrayscale(Image original)
    {
        Bitmap grayscaleImage = new Bitmap(original.Width, original.Height);

        for (int y = 0; y < original.Height; y++)
        {
            for (int x = 0; x < original.Width; x++)
            {
                Color originalColor = ((Bitmap)original).GetPixel(x, y);
                int grayscaleValue = (int)((originalColor.R * 0.3) + (originalColor.G * 0.59) + (originalColor.B * 0.11));
                Color grayscaleColor = Color.FromArgb(grayscaleValue, grayscaleValue, grayscaleValue);
                grayscaleImage.SetPixel(x, y, grayscaleColor);
            }
        }

        return grayscaleImage;
    }
}
